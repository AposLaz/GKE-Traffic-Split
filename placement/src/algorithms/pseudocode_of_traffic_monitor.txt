function __iptables(link: str):
    um, dm = split_link(link)
    um_list, dm_list = [], []

    // Get the list of pods in the namespace
    vertices_set = get_PODList_namespace(self.graph.MSName)
    
    // Remove None key from VerticesSet dictionary
    remove_None_key(self.graph.VerticesSet)
    
    // Iterate through the pods to separate upstream and downstream pods
    for pod in vertices_set:
        if pod starts with um and the next character is '-', add pod to um_list
        if pod starts with dm and the next character is '-', add pod to dm_list
    
    // Get the node information for each pod
    pod_node = get_POD_Node_namespace(self.graph.MSName)
    
    // Remove nodes that are not in um_list or dm_list
    remove_unused_nodes(pod_node, um_list, dm_list)

    // Generate node_um_dm dictionary to store upstream and downstream pods for each node
    node_um_dm = generate_node_um_dm(pod_node, um_list, dm_list)

    // Initialize arrays um and dm to store traffic allocation ratios
    initialize_arrays(um, dm, um_list, dm_list)

    // Calculate the desired ratio of upstream pods to downstream pods
    need = calculate_ratio(um_list, dm_list)

    // Allocate traffic within each node
    allocate_traffic_within_node(node_um_dm, um_list, dm_list, need)

    // Allocate traffic between nodes
    allocate_traffic_between_nodes(dm_list, um_list, node_um_dm, need)

// Helper functions

function split_link(link: str) -> Tuple[str, str]:
    // Split the link into upstream and downstream components
    return link.split('~')

function remove_None_key(vertices_set: Dict[str, Vertices]):
    // Remove the None key from the VerticesSet dictionary
    if None in vertices_set.keys():
        delete vertices_set[None]

function remove_unused_nodes(pod_node: Dict[str, str], um_list: List[str], dm_list: List[str]):
    // Remove nodes that are not in um_list or dm_list from the pod_node dictionary
    for key in pod_node.keys():
        if key not in um_list and key not in dm_list:
            delete pod_node[key]

function generate_node_um_dm(pod_node: Dict[str, str], um_list: List[str], dm_list: List[str]) -> Dict[str, List[List[str], List[str]]]:
    // Generate node_um_dm dictionary to store upstream and downstream pods for each node
    node_um_dm = {}
    for pod, node in pod_node.items():
        if node not in node_um_dm:
            node_um_dm[node] = [[], []]
        if pod in um_list:
            node_um_dm[node][0].append(pod)
        if pod in dm_list:
            node_um_dm[node][1].append(pod)
    return node_um_dm

function initialize_arrays(um: List[int], dm: List[int], um_list: List[str], dm_list: List[str]):
    // Initialize arrays um and dm with ones and zeros respectively
    um = array of ones with length equal to length of um_list
    dm = array of zeros with length equal to length of dm_list

function calculate_ratio(um_list: List[str], dm_list: List[str]) -> float:
    // Calculate the desired ratio of upstream pods to downstream pods
    return float(length of um_list) / float(length of dm_list)

function allocate_traffic_within_node(node_um_dm: Dict[str, List[List[str], List[str]]], um_list: List[str], dm_list: List[str], need: float):
    // Allocate traffic within each node
    for node, pods in node_um_dm.items():
        if length of upstream pods and downstream pods is not equal to zero:
            if ratio of upstream pods to downstream pods is greater than or equal to need:
                for each downstream pod in node:
                    allocate traffic between upstream and downstream pods
                for each upstream pod in node:
                    update traffic allocation ratios in um and dm arrays
            else:
                for each downstream pod in node:
                    allocate traffic based on the ratio of downstream pods
                for each upstream pod in node:
                    allocate traffic based on the ratio of downstream pods

function allocate_traffic_between_nodes(dm_list: List[str], um_list: List[str], node_um_dm: Dict[str, List[List[str], List[str]]], need: float):
    // Allocate traffic between nodes
    for each downstream pod in dm_list:
        if traffic allocation for downstream pod is less than need:
            for each node with upstream pods:
                if there are upstream pods available:
                    if traffic allocation for upstream pods is sufficient:
                        allocate traffic between upstream and downstream pods
                        update traffic allocation ratios
                    else:
                        allocate remaining traffic based on available upstream pods

